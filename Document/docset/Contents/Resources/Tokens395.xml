<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TAGContainer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TAGContainer</TokenIdentifier>
			<Abstract type="html">A class that provides access to container values.
Container objects must be created via @ref TAGManager.
Once a container is created, it can be queried for key values which
may depend on rules established for the container.
A container is automatically refreshed periodically (every 12 hours), but
can also be manually refreshed with TAGContainer::refresh.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>
			
			<NodeRef refid="395"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/setContainerId:</TokenIdentifier>
			<Abstract type="html">The ID for this container.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, copy) NSString *containerId</Declaration>
			
			
			<Anchor>//api/name/containerId</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TAGContainer/containerId</TokenIdentifier>
			<Abstract type="html">The ID for this container.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic, copy) NSString *containerId</Declaration>
			
			
			<Anchor>//api/name/containerId</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/setLastRefreshTime:</TokenIdentifier>
			<Abstract type="html">The last time (in milliseconds since midnight Jan 1, 1970 UTC) that this
container was refreshed from the network.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>@property (atomic, readonly) double lastRefreshTime</Declaration>
			
			
			<Anchor>//api/name/lastRefreshTime</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TAGContainer/lastRefreshTime</TokenIdentifier>
			<Abstract type="html">The last time (in milliseconds since midnight Jan 1, 1970 UTC) that this
container was refreshed from the network.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>@property (atomic, readonly) double lastRefreshTime</Declaration>
			
			
			<Anchor>//api/name/lastRefreshTime</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/init</TokenIdentifier>
			<Abstract type="html">Containers should be instantiated through TAGManager or TAGContainerOpener.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/booleanForKey:</TokenIdentifier>
			<Abstract type="html">Returns a &lt;code&gt;BOOL&lt;/code&gt; representing the configuration value for the
given key. If the container has no value for this key, NO will be returned.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (BOOL)booleanForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key to lookup for the configuration value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/booleanForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/doubleForKey:</TokenIdentifier>
			<Abstract type="html">Returns a &lt;code&gt;double&lt;/code&gt; representing the configuration value for the
given key. If the container has no value for this key, 0.0 will be returned.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (double)doubleForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key to lookup for the configuration value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/doubleForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/int64ForKey:</TokenIdentifier>
			<Abstract type="html">Returns an &lt;code&gt;int64_t&lt;/code&gt; representing the configuration value for the
given key. If the container has no value for this key, 0 will be returned.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (int64_t)int64ForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key to lookup for the configuration value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/int64ForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/stringForKey:</TokenIdentifier>
			<Abstract type="html">Returns an &lt;code&gt;NSString&lt;/code&gt; to represent the configuration value for the
given key. If the container has no value for this key, an empty string
will be returned.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key to lookup for the configuration value.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/stringForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/refresh</TokenIdentifier>
			<Abstract type="html">Requests that this container be refreshed from the network.
This call is asynchronous, so the refresh may take place on another thread.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (void)refresh</Declaration>
			
			
			<Anchor>//api/name/refresh</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/close</TokenIdentifier>
			<Abstract type="html">Closes this container so that it will no longer be refreshed.
After closing, don&apos;t make any other calls to the container.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (void)close</Declaration>
			
			
			<Anchor>//api/name/close</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/isDefault</TokenIdentifier>
			<Abstract type="html">Returns whether this is a default container, or one refreshed from the
server.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isDefault</Declaration>
			
			
			<Anchor>//api/name/isDefault</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/registerFunctionCallMacroHandler:forMacro:</TokenIdentifier>
			<Abstract type="html">Registers the given macro handler to handle a given function call macro.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (void)registerFunctionCallMacroHandler:(id&lt;TAGFunctionCallMacroHandler&gt;)handler forMacro:(NSString *)macroName</Declaration>
			<Parameters>
				<Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler for the macro. If the parameter is
nil, the method unregisters any existing handler for that macro.</Abstract>
				</Parameter><Parameter>
					<Name>macroName</Name>
					<Abstract type="html">The name of the macro which is being registered.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerFunctionCallMacroHandler:forMacro:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/functionCallMacroHandlerForMacro:</TokenIdentifier>
			<Abstract type="html">Given the name of a function call macro, returns the handler registered for
the macro.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (id&lt;TAGFunctionCallMacroHandler&gt;)functionCallMacroHandlerForMacro:(NSString *)functionCallMacroName</Declaration>
			
			<ReturnValue><Abstract type="html">The handler registered for the macro.</Abstract></ReturnValue>
			<Anchor>//api/name/functionCallMacroHandlerForMacro:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/registerFunctionCallTagHandler:forTag:</TokenIdentifier>
			<Abstract type="html">Registers the given tag handler to handle a given function call tag.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (void)registerFunctionCallTagHandler:(id&lt;TAGFunctionCallTagHandler&gt;)handler forTag:(NSString *)tagName</Declaration>
			<Parameters>
				<Parameter>
					<Name>handler</Name>
					<Abstract type="html">The handler for the tag. If the parameter is
nil, the method unregisters any existing handler for that tag.</Abstract>
				</Parameter><Parameter>
					<Name>tagName</Name>
					<Abstract type="html">The name of the tag which is being registered.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerFunctionCallTagHandler:forTag:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TAGContainer/functionCallTagHandlerForTag:</TokenIdentifier>
			<Abstract type="html">Given the name of a function call tag, returns the handler registered for
the tag.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (id&lt;TAGFunctionCallTagHandler&gt;)functionCallTagHandlerForTag:(NSString *)functionCallTagName</Declaration>
			
			<ReturnValue><Abstract type="html">The handler registered for the tag.</Abstract></ReturnValue>
			<Anchor>//api/name/functionCallTagHandlerForTag:</Anchor>
		</Token>
		
	</File>
</Tokens>