<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/TAGFunctionCallMacroHandler.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/TAGFunctionCallMacroHandler</TokenIdentifier>
			<Abstract type="html">A protocol implemented by the application to calculate the value of a
function call macro.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>
			
			<NodeRef refid="704"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TAGFunctionCallMacroHandler/valueForMacro:parameters:</TokenIdentifier>
			<Abstract type="html">Returns an object which is the calculated value of the macro.
Handler is given the macro name and a dictionary of named parameters.</Abstract>
			<DeclaredIn>TAGContainer.h</DeclaredIn>			
			
			<Declaration>- (id)valueForMacro:(NSString *)macroName parameters:(NSDictionary *)parameters</Declaration>
			<Parameters>
				<Parameter>
					<Name>macroName</Name>
					<Abstract type="html">The same name by which the handler was registered. It
is provided as a convenience to allow a single handler to be registered
for multiple function call macros.</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">The named parameters for the function call. The
dictionary may contain &lt;code&gt;NSString&lt;/code&gt;, &lt;code&gt;NSNumber&lt;/code&gt;
(double, int, or boolean), &lt;code&gt;NSDictionary&lt;/code&gt;, or
&lt;code&gt;NSArray&lt;/code&gt;.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The evaluated result, which can be an &lt;code&gt;NSString&lt;/code&gt; or
&lt;code&gt;NSNumber&lt;/code&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/valueForMacro:parameters:</Anchor>
		</Token>
		
	</File>
</Tokens>