<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PFAnonymousUtils.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PFAnonymousUtils</TokenIdentifier>
			<Abstract type="html">Provides utility functions for working with Anonymously logged-in users.  Anonymous users have some unique characteristics:
&lt;ul&gt;
   &lt;li&gt;Anonymous users don&apos;t need a user name or password.&lt;/li&gt;
   &lt;li&gt;Once logged out, an anonymous user cannot be recovered.&lt;/li&gt;
   &lt;li&gt;When the current user is anonymous, the following methods can be used to switch to a different user or convert the
     anonymous user into a regular one:
     &lt;ul&gt;
       &lt;li&gt;signUp converts an anonymous user to a standard user with the given username and password.
           Data associated with the anonymous user is retained.&lt;/li&gt;
       &lt;li&gt;logIn switches users without converting the anonymous user.  Data associated with the anonymous user will be lost.&lt;/li&gt;
       &lt;li&gt;Service logIn (e.g. Facebook, Twitter) will attempt to convert the anonymous user into a standard user by linking it to the service.
           If a user already exists that is linked to the service, it will instead switch to the existing user.&lt;/li&gt;
       &lt;li&gt;Service linking (e.g. Facebook, Twitter) will convert the anonymous user into a standard user by linking it to the service.&lt;/li&gt;
     &lt;/ul&gt;
&lt;/ul&gt;</Abstract>
			<DeclaredIn>PFAnonymousUtils.h</DeclaredIn>
			
			<NodeRef refid="162"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PFAnonymousUtils/logInWithBlock:</TokenIdentifier>
			<Abstract type="html">Creates an anonymous user.</Abstract>
			<DeclaredIn>PFAnonymousUtils.h</DeclaredIn>			
			
			<Declaration>+ (void)logInWithBlock:(PFUserResultBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute when anonymous user creation is complete. The block should have the following argument signature:
(PFUser user, NSError error)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/logInWithBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PFAnonymousUtils/logInWithTarget:selector:</TokenIdentifier>
			<Abstract type="html">Creates an anonymous user.  The selector for the callback should look like: (PFUser )user error:(NSError )error</Abstract>
			<DeclaredIn>PFAnonymousUtils.h</DeclaredIn>			
			
			<Declaration>+ (void)logInWithTarget:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>target</Name>
					<Abstract type="html">Target object for the selector.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector that will be called when the asynchronous request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/logInWithTarget:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PFAnonymousUtils/isLinkedWithUser:</TokenIdentifier>
			<Abstract type="html">Whether the user is logged in anonymously.</Abstract>
			<DeclaredIn>PFAnonymousUtils.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)isLinkedWithUser:(PFUser *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>user</Name>
					<Abstract type="html">User to check for anonymity. The user must be logged in on this device.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">True if the user is anonymous.  False if the user is not the current user or is not anonymous.</Abstract></ReturnValue>
			<Anchor>//api/name/isLinkedWithUser:</Anchor>
		</Token>
		
	</File>
</Tokens>