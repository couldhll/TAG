<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/PFSubclassing.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/PFSubclassing</TokenIdentifier>
			<Abstract type="html">If a subclass of PFObject conforms to PFSubclassing and calls registerSubclass, Parse will be able to use that class as the native class for a Parse cloud object.</Abstract>
			<DeclaredIn>PFSubclassing.h</DeclaredIn>
			
			<NodeRef refid="694"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/PFSubclassing/object</TokenIdentifier>
			<Abstract type="html">Constructs an object of the most specific class known to implement parseClassName.
This method takes care to help PFObject subclasses be subclassed themselves.
For example, [PFUser object] returns a PFUser by default but will return an
object of a registered subclass instead if one is known.
A default implementation is provided by PFObject which should always be sufficient.</Abstract>
			<DeclaredIn>PFSubclassing.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)object</Declaration>
			
			<ReturnValue><Abstract type="html">Returns the object that is instantiated.</Abstract></ReturnValue>
			<Anchor>//api/name/object</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/PFSubclassing/objectWithoutDataWithObjectId:</TokenIdentifier>
			<Abstract type="html">Creates a reference to an existing PFObject for use in creating associations between PFObjects.  Calling isDataAvailable on this
object will return NO until fetchIfNeeded or refresh has been called.  No network request will be made.
A default implementation is provided by PFObject which should always be sufficient.</Abstract>
			<DeclaredIn>PFSubclassing.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)objectWithoutDataWithObjectId:(NSString *)objectId</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectId</Name>
					<Abstract type="html">The object id for the referenced object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A PFObject without data.</Abstract></ReturnValue>
			<Anchor>//api/name/objectWithoutDataWithObjectId:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/PFSubclassing/parseClassName</TokenIdentifier>
			<Abstract type="html">The name of the class as seen in the REST API.</Abstract>
			<DeclaredIn>PFSubclassing.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)parseClassName</Declaration>
			
			
			<Anchor>//api/name/parseClassName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/PFSubclassing/query</TokenIdentifier>
			<Abstract type="html">Create a query which returns objects of this type.
A default implementation is provided by PFObject which should always be sufficient.</Abstract>
			<DeclaredIn>PFSubclassing.h</DeclaredIn>			
			
			<Declaration>+ (PFQuery *)query</Declaration>
			
			
			<Anchor>//api/name/query</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/PFSubclassing/registerSubclass</TokenIdentifier>
			<Abstract type="html">Lets Parse know this class should be used to instantiate all objects with class type parseClassName.
This method must be called before [Parse setApplicationId:clientKey:]</Abstract>
			<DeclaredIn>PFSubclassing.h</DeclaredIn>			
			
			<Declaration>+ (void)registerSubclass</Declaration>
			
			
			<Anchor>//api/name/registerSubclass</Anchor>
		</Token>
		
	</File>
</Tokens>