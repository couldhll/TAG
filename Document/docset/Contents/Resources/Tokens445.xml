<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSObject+ObjCRuntime.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSObject(ObjCRuntime)</TokenIdentifier>
			<Abstract type="html">@brief NSObject [&lt;objc/runtime.h&gt;][0] extensions
[0]: https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>
			
			<NodeRef refid="445"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setClassName:</TokenIdentifier>
			<Abstract type="html">@brief Class name of object.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *className</Declaration>
			
			
			<Anchor>//api/name/className</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/NSObject(ObjCRuntime)/className</TokenIdentifier>
			<Abstract type="html">@brief Class name of object.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *className</Declaration>
			
			
			<Anchor>//api/name/className</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/variableForName:</TokenIdentifier>
			<Abstract type="html">@brief Obtains the value of an instance variable of a class instance.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/getVariable:forName:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setVariable:forName:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)variableForName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the instance variable definition to obtain.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/variableForName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/methodName</TokenIdentifier>
			<Abstract type="html">@brief Implement property getter for an instance variable.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/variableForName:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)methodName</Declaration>
			<Parameters>
				<Parameter>
					<Name>methodName</Name>
					<Abstract type="html">The name of property getter.</Abstract>
				</Parameter><Parameter>
					<Name>nameString</Name>
					<Abstract type="html">A C String to represent the name of instance variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/methodName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/getVariable:forName:</TokenIdentifier>
			<Abstract type="html">@brief Obtains the value of an instance variable of a class instance.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/variableForName:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setVariable:forName:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getVariable:(void **)outValue forName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>outValue</Name>
					<Abstract type="html">On return, contains a pointer to the value of the instance variable.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the instance variable definition to obtain.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getVariable:forName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setVariable:forName:</TokenIdentifier>
			<Abstract type="html">@brief Changes the value of an instance variable of a class instance.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/variableForName:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/getVariable:forName:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setVariable:(void *)value forName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The new value for the instance variable.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">A string. Pass the name of the instance variable whose value you wish to modify.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setVariable:forName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/methodName:{:</TokenIdentifier>
			<Abstract type="html">@brief Implement property assign setter for an instance variable.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setVariable:forName:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)methodName:(id)value {</Declaration>
			<Parameters>
				<Parameter>
					<Name>methodName</Name>
					<Abstract type="html">The name of property getter.</Abstract>
				</Parameter><Parameter>
					<Name>nameString</Name>
					<Abstract type="html">A C String to represent the name of instance variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/methodName:{:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/methodName:</TokenIdentifier>
			<Abstract type="html">@brief Implement property retain setter for an instance variable.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setVariable:forName:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)methodName:(id)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>methodName</Name>
					<Abstract type="html">The name of property getter.</Abstract>
				</Parameter><Parameter>
					<Name>nameString</Name>
					<Abstract type="html">A C String to represent the name of instance variable.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/methodName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/performSelector:withObject:withObject:withObject:</TokenIdentifier>
			<Abstract type="html">@brief Invokes a method of the receiver with 3 parameter</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/performSelector:withObject:withObject:withObject:withObject:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2 withObject:(id)object3</Declaration>
			<Parameters>
				<Parameter>
					<Name>aSelector</Name>
					<Abstract type="html">A selector that identifies the method to invoke. The method should take 3 argument of type id.</Abstract>
				</Parameter><Parameter>
					<Name>object1</Name>
					<Abstract type="html">a parameter</Abstract>
				</Parameter><Parameter>
					<Name>object2</Name>
					<Abstract type="html">a parameter</Abstract>
				</Parameter><Parameter>
					<Name>object3</Name>
					<Abstract type="html">a parameter</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/performSelector:withObject:withObject:withObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/performSelector:withObject:withObject:withObject:withObject:</TokenIdentifier>
			<Abstract type="html">@brief Invokes a method of the receiver with 4 parameter</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/performSelector:withObject:withObject:withObject:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2 withObject:(id)object3 withObject:(id)object4</Declaration>
			<Parameters>
				<Parameter>
					<Name>aSelector</Name>
					<Abstract type="html">A selector that identifies the method to invoke. The method should take 4 argument of type id.</Abstract>
				</Parameter><Parameter>
					<Name>object1</Name>
					<Abstract type="html">a parameter</Abstract>
				</Parameter><Parameter>
					<Name>object2</Name>
					<Abstract type="html">a parameter</Abstract>
				</Parameter><Parameter>
					<Name>object3</Name>
					<Abstract type="html">a parameter</Abstract>
				</Parameter><Parameter>
					<Name>object4</Name>
					<Abstract type="html">a parameter</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/performSelector:withObject:withObject:withObject:withObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/associatedObjectForKey:</TokenIdentifier>
			<Abstract type="html">@brief Returns the value associated with a given object for a given key.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
			<Declaration>- (id)associatedObjectForKey:(void *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The source object for the association.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the association.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value associated with the key key for object.</Abstract></ReturnValue>
			<Anchor>//api/name/associatedObjectForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setAssociatedObject:forKey:</TokenIdentifier>
			<Abstract type="html">@brief Sets an associated value for a given object using a given key. Association policy is retain.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
			<Declaration>- (void)setAssociatedObject:(id)object forKey:(void *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The source object for the association.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the association.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to associate with the key key for object. Pass nil to clear an existing association.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAssociatedObject:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/setAssociatedObject:forKey:policy:</TokenIdentifier>
			<Abstract type="html">@brief Sets an associated value for a given object using a given key and association policy.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
			<Declaration>- (void)setAssociatedObject:(id)object forKey:(void *)key policy:(objc_AssociationPolicy)policy</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The source object for the association.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the association.</Abstract>
				</Parameter><Parameter>
					<Name>policy</Name>
					<Abstract type="html">The policy for the association. For possible values, see [Associative Object Behaviors][1].</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to associate with the key key for object. Pass nil to clear an existing association.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAssociatedObject:forKey:policy:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/removeAssociatedObjectForKey:</TokenIdentifier>
			<Abstract type="html">@brief Removes all associations for a given object. Association policy is retain.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
			<Declaration>- (void)removeAssociatedObjectForKey:(void *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The source object for the association.
@details setAssociatedObject:nil forKey:key</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeAssociatedObjectForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSObject(ObjCRuntime)/removeAssociatedObjectForKey:policy:</TokenIdentifier>
			<Abstract type="html">@brief Removes all associations for a given object.</Abstract>
			<DeclaredIn>NSObject.h</DeclaredIn>			
			
			<Declaration>- (void)removeAssociatedObjectForKey:(void *)key policy:(objc_AssociationPolicy)policy</Declaration>
			<Parameters>
				<Parameter>
					<Name>policy</Name>
					<Abstract type="html">The policy for the association. For possible values, see [Associative Object Behaviors][1].
@details setAssociatedObject:nil forKey:key policy:policy</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">The source object for the association.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeAssociatedObjectForKey:policy:</Anchor>
		</Token>
		
	</File>
</Tokens>