<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSSet+Functional.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSSet(Functional)</TokenIdentifier>
			<Abstract type="html">@brief See @ref Map/Filter/Reduce for concept of functional tools.
@details Set is treated as variation of array.</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>
			
			<NodeRef refid="448"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/applyProcedure:</TokenIdentifier>
			<Abstract type="html">@brief Apply procedure to objects.
@details Shallow wrapper of @link NSAApply @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (void)applyProcedure:(NSAObjectProcedure)procedure</Declaration>
			
			
			<Anchor>//api/name/applyProcedure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/arrayByMappingOperator:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper to objects and returns the result as array.
@details Shallow wrapper of @link NSAMap @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)arrayByMappingOperator:(NSAObjectUnaryOperator)mapper</Declaration>
			
			
			<Anchor>//api/name/arrayByMappingOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/arrayByMapFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper to objects and filters nil result and returns the result as array.
@details Shallow wrapper of @link NSAMapFilter @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)arrayByMapFilteringOperator:(NSAObjectUnaryOperator)mapper</Declaration>
			
			
			<Anchor>//api/name/arrayByMapFilteringOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/arrayByFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects and returns result as array.
@details Shallow wrapper of @link NSAFilter @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)arrayByFilteringOperator:(NSAObjectPicker)filter</Declaration>
			
			
			<Anchor>//api/name/arrayByFilteringOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/reduce:</TokenIdentifier>
			<Abstract type="html">@brief Reduces objects and returns the result.
@details Shallow wrapper of @link NSAReduce @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (id)reduce:(NSAObjectBinaryOperator)reduce</Declaration>
			
			
			<Anchor>//api/name/reduce:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/reduce:initialObject:</TokenIdentifier>
			<Abstract type="html">@brief Reduces objects and returns the result.
@details Shallow wrapper of @link NSAReduceWithInitialObject @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (id)reduce:(NSAObjectBinaryOperator)reduce initialObject:(id)initialObject</Declaration>
			
			
			<Anchor>//api/name/reduce:initialObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/setByMappingOperator:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper to objects and returns the result as set.
@details Shallow wrapper of @link NSAMap @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSSet *)setByMappingOperator:(NSAObjectUnaryOperator)mapper</Declaration>
			
			
			<Anchor>//api/name/setByMappingOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/setByMapFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper to objects and filters nil result and returns the result as set.
@details Shallow wrapper of @link NSAMapFilter @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSSet *)setByMapFilteringOperator:(NSAObjectUnaryOperator)mapper</Declaration>
			
			
			<Anchor>//api/name/setByMapFilteringOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/setByFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects and returns result as set.
@details Shallow wrapper of @link NSAFilter @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSSet *)setByFilteringOperator:(NSAObjectPicker)filter</Declaration>
			
			
			<Anchor>//api/name/setByFilteringOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSSet(Functional)/firstObjectByFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects and returns the first object of result.
@details Shallow wrapper of @link NSAFilterWithIndex @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (id)firstObjectByFilteringOperator:(NSAObjectPicker)filter</Declaration>
			
			
			<Anchor>//api/name/firstObjectByFilteringOperator:</Anchor>
		</Token>
		
	</File>
</Tokens>