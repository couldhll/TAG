<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Analytics.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Analytics</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>
			
			<NodeRef refid="28"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Analytics/initializeWithSecret:</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>+ (void)initializeWithSecret:(NSString *)secret</Declaration>
			<Parameters>
				<Parameter>
					<Name>secret</Name>
					<Abstract type="html">Your Segment.io secret key from the setup guide at https://segment.io

@discussion
While developing, we recommend you reset the settings and turn on debug logging right after you initialize the Analytics instance with your secret:

- (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions
{
    // Initialize your shared Analytics instance.
    [Analytics withSecret:@&quot;YOUR SEGMENT.IO SECRET KEY FROM THE SETUP GUIDE AT HTTPS://SEGMENT.IO&quot;];
    
    // During development: reset the settings cache frequently so that
    // as you change settings on your integrations page, the settings update quickly here.
    [[Analytics sharedAnalytics] reset]; // remove before app store release
    [[Analytics sharedAnalytics] debug:YES]; // if you want to see debug logs
    
    // YOUR OTHER APP LAUNCH CODE HERE....

    return YES;
}</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initializeWithSecret:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Analytics/debug:</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>+ (void)debug:(BOOL)showDebugLogs</Declaration>
			<Parameters>
				<Parameter>
					<Name>showDebugLogs</Name>
					<Abstract type="html">YES to enable debug logging, NO to disable debug logging.

@discussion
By default, the SDK will not log anything to the Xcode output console. If you want to track down an issue affecting your analytics code, or just see that analytics requests are indeed going out, you can enable debug logging with this method.

While developing, we recommend you reset the settings and turn on debug logging right after you initialize the Analytics instance with your secret:

- (BOOL)application:(UIApplication )application didFinishLaunchingWithOptions:(NSDictionary )launchOptions
{
// Initialize your shared Analytics instance.
[Analytics initializeWithSecret:@&quot;YOUR SEGMENT.IO SECRET KEY FROM THE SETUP GUIDE AT HTTPS://SEGMENT.IO&quot;];

// During development: reset the settings cache frequently so that
// as you change settings on your integrations page, the settings update quickly here.
[[Analytics sharedAnalytics] reset]; // remove before app store release
[[Analytics sharedAnalytics] debug:YES]; // if you want to see debug logs

// Override point for customization after application launch.

// YOUR OTHER APP LAUNCH CODE HERE

return YES;
}</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/debug:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Analytics/sharedAnalytics</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)sharedAnalytics</Declaration>
			
			
			<Anchor>//api/name/sharedAnalytics</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Analytics/identify:</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>- (void)identify:(NSString *)userId</Declaration>
			<Parameters>
				<Parameter>
					<Name>userId</Name>
					<Abstract type="html">A database ID (or email address) for this user. If you don&apos;t have a userId
                      but want to record traits, you should pass nil. We will automatically generate
                      a UUID to let you identify &quot;anonymous&quot; users. For more information on how we 
                      generate the UUID and Apple&apos;s policies on IDs, see https://segment.io/libraries/ios#ids</Abstract>
				</Parameter><Parameter>
					<Name>traits</Name>
					<Abstract type="html">A dictionary of traits you know about the user. Things like: email, name, subscriptionPlan, etc.

@discussion
When you learn more about who your user is, you can record that information with identify.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/identify:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Analytics/track:</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>- (void)track:(NSString *)event</Declaration>
			<Parameters>
				<Parameter>
					<Name>event</Name>
					<Abstract type="html">The name of the event you&apos;re tracking. We recommend using human-readable names
                      like Played a Song or Updated Status.</Abstract>
				</Parameter><Parameter>
					<Name>properties</Name>
					<Abstract type="html">A dictionary of properties for the event. If the event was &apos;Added to Shopping Cart&apos;, it might
                      have properties like price, productType, etc.

@discussion
When a user performs an action in your app, you&apos;ll want to track that action for later analysis. Use the event name to say what the user did, and properties to specify any interesting details of the action.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/track:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Analytics/screen:</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>- (void)screen:(NSString *)screenTitle</Declaration>
			<Parameters>
				<Parameter>
					<Name>screenTitle</Name>
					<Abstract type="html">The title of the screen being viewed. We recommend using human-readable names
                      like &apos;Photo Feed&apos; or &apos;Completed Purchase Screen&apos;.</Abstract>
				</Parameter><Parameter>
					<Name>properties</Name>
					<Abstract type="html">A dictionary of properties for the screen view event. If the event was &apos;Added to Shopping Cart&apos;,
                      it might have properties like price, productType, etc.

@discussion
When a user views a screen in your app, you&apos;ll want to record that here. For some tools like Google Analytics and Flurry, screen views are treated specially, and are different from &quot;events&quot; kind of like &quot;page views&quot; on the web. For services that don&apos;t treat &quot;screen views&quot; specially, we map &quot;screen&quot; straight to &quot;track&quot; with the same parameters. For example, Mixpanel doesn&apos;t treat &quot;screen views&quot; any differently. So a call to &quot;screen&quot; will be tracked as a normal event in Mixpanel, but get sent to Google Analytics and Flurry as a &quot;screen&quot;.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/screen:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Analytics/registerPushDeviceToken:</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>- (void)registerPushDeviceToken:(NSData *)deviceToken</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceToken</Name>
					<Abstract type="html">device token as returned &lt;code&gt;application:didRegisterForRemoteNotificationsWithDeviceToken:&lt;/code&gt;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerPushDeviceToken:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Analytics/initWithSecret:</TokenIdentifier>
			<Abstract type="html">@method</Abstract>
			<DeclaredIn>Analytics.h</DeclaredIn>			
			
			<Declaration>- (id)initWithSecret:(NSString *)secret</Declaration>
			
			
			<Anchor>//api/name/initWithSecret:</Anchor>
		</Token>
		
	</File>
</Tokens>