<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSDictionary+Functional.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSDictionary(Functional)</TokenIdentifier>
			<Abstract type="html">@brief See @ref Map/Filter/Reduce for concept of functional tools.
@details Dictionary is not fit for this functional tools. But this implementation takes concept of them.</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cat/NSMutableDictionary(Functional)</TokenIdentifier>
		
	</RelatedTokens>
	
			<NodeRef refid="506"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/applyProcedureWithKey:</TokenIdentifier>
			<Abstract type="html">@brief Apply procedure with key to objects.
@details Works like NSAApply is adjusted to values of dictionary.</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (void)applyProcedureWithKey:(NSAObjectProcedureWithKey)procedure</Declaration>
			
			
			<Anchor>//api/name/applyProcedureWithKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/dictionaryByMappingOperator:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper to objects and returns the result as dictionary.
@details Works like @link NSAMap @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)dictionaryByMappingOperator:(NSAObjectUnaryOperator)mapper</Declaration>
			
			
			<Anchor>//api/name/dictionaryByMappingOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/dictionaryByMappingOperatorWithKey:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper with key to objects and returns the result as array.
@details Works like @link NSAMapWithIndex @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)dictionaryByMappingOperatorWithKey:(NSAObjectUnaryOperatorWithKey)mapper</Declaration>
			
			
			<Anchor>//api/name/dictionaryByMappingOperatorWithKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/dictionaryByMapFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper to objects and filters nil result and returns the result as array.
@details Works like @link NSAMapFilter @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)dictionaryByMapFilteringOperator:(NSAObjectUnaryOperator)mapper</Declaration>
			
			
			<Anchor>//api/name/dictionaryByMapFilteringOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/dictionaryByMapFilteringOperatorWithKey:</TokenIdentifier>
			<Abstract type="html">@brief Maps mapper with index to objects and filters nil result and returns the result as array.
@details Works like @link NSAMapFilterWithIndex @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)dictionaryByMapFilteringOperatorWithKey:(NSAObjectUnaryOperatorWithKey)mapper</Declaration>
			
			
			<Anchor>//api/name/dictionaryByMapFilteringOperatorWithKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/dictionaryByFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects and returns result as array.
@details Works like @link NSAFilter @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)dictionaryByFilteringOperator:(NSAObjectPicker)filter</Declaration>
			
			
			<Anchor>//api/name/dictionaryByFilteringOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/dictionaryByFilteringOperatorWithKey:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects with key and returns result as array.
@details Works like @link NSAFilterWithIndex @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)dictionaryByFilteringOperatorWithKey:(NSAObjectPickerWithKey)filter</Declaration>
			
			
			<Anchor>//api/name/dictionaryByFilteringOperatorWithKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/firstObjectByFilteringOperator:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects and returns the first object of result.
@details Shallow wrapper of @link NSAFilter @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (id)firstObjectByFilteringOperator:(NSAObjectPicker)filter</Declaration>
			
			
			<Anchor>//api/name/firstObjectByFilteringOperator:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/firstObjectByFilteringOperatorWithKey:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects with key and returns the first object of result.
@details Shallow wrapper of @link NSAFilterWithInde @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (id)firstObjectByFilteringOperatorWithKey:(NSAObjectPickerWithKey)filter</Declaration>
			
			
			<Anchor>//api/name/firstObjectByFilteringOperatorWithKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(Functional)/firstKeyByFilteringOperatorWithKey:</TokenIdentifier>
			<Abstract type="html">@brief Filters objects with key and returns the first key of result.
@details Shallow wrapper of @link NSAFilterWithIndex @endlink</Abstract>
			<DeclaredIn>NSAFunctional.h</DeclaredIn>			
			
			<Declaration>- (id)firstKeyByFilteringOperatorWithKey:(NSAObjectPickerWithKey)filter</Declaration>
			
			
			<Anchor>//api/name/firstKeyByFilteringOperatorWithKey:</Anchor>
		</Token>
		
	</File>
</Tokens>