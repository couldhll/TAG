<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PFACL.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PFACL</TokenIdentifier>
			<Abstract type="html">A PFACL is used to control which users can access or modify a particular
object. Each PFObject can have its own PFACL. You can grant
read and write permissions separately to specific users, to groups of users
that belong to roles, or you can grant permissions to &quot;the public&quot; so that,
for example, any user could read a particular object but only a particular
set of users could write to that object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>
			
			<NodeRef refid="160"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PFACL/ACL</TokenIdentifier>
			<Abstract type="html">Creates an ACL with no permissions granted.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>+ (PFACL *)ACL</Declaration>
			
			
			<Anchor>//api/name/ACL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PFACL/ACLWithUser:</TokenIdentifier>
			<Abstract type="html">Creates an ACL where only the provided user has access.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>+ (PFACL *)ACLWithUser:(PFUser *)user</Declaration>
			
			
			<Anchor>//api/name/ACLWithUser:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setPublicReadAccess:</TokenIdentifier>
			<Abstract type="html">Set whether the public is allowed to read this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setPublicReadAccess:(BOOL)allowed</Declaration>
			
			
			<Anchor>//api/name/setPublicReadAccess:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getPublicReadAccess</TokenIdentifier>
			<Abstract type="html">Gets whether the public is allowed to read this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getPublicReadAccess</Declaration>
			
			
			<Anchor>//api/name/getPublicReadAccess</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setPublicWriteAccess:</TokenIdentifier>
			<Abstract type="html">Set whether the public is allowed to write this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setPublicWriteAccess:(BOOL)allowed</Declaration>
			
			
			<Anchor>//api/name/setPublicWriteAccess:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getPublicWriteAccess</TokenIdentifier>
			<Abstract type="html">Gets whether the public is allowed to write this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getPublicWriteAccess</Declaration>
			
			
			<Anchor>//api/name/getPublicWriteAccess</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setReadAccess:forUserId:</TokenIdentifier>
			<Abstract type="html">Set whether the given user id is allowed to read this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setReadAccess:(BOOL)allowed forUserId:(NSString *)userId</Declaration>
			
			
			<Anchor>//api/name/setReadAccess:forUserId:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getReadAccessForUserId:</TokenIdentifier>
			<Abstract type="html">Gets whether the given user id is explicitly allowed to read this object.
Even if this returns NO, the user may still be able to access it if getPublicReadAccess returns YES
or if the user belongs to a role that has access.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getReadAccessForUserId:(NSString *)userId</Declaration>
			
			
			<Anchor>//api/name/getReadAccessForUserId:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setWriteAccess:forUserId:</TokenIdentifier>
			<Abstract type="html">Set whether the given user id is allowed to write this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setWriteAccess:(BOOL)allowed forUserId:(NSString *)userId</Declaration>
			
			
			<Anchor>//api/name/setWriteAccess:forUserId:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getWriteAccessForUserId:</TokenIdentifier>
			<Abstract type="html">Gets whether the given user id is explicitly allowed to write this object.
Even if this returns NO, the user may still be able to write it if getPublicWriteAccess returns YES
or if the user belongs to a role that has access.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getWriteAccessForUserId:(NSString *)userId</Declaration>
			
			
			<Anchor>//api/name/getWriteAccessForUserId:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setReadAccess:forUser:</TokenIdentifier>
			<Abstract type="html">Set whether the given user is allowed to read this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setReadAccess:(BOOL)allowed forUser:(PFUser *)user</Declaration>
			
			
			<Anchor>//api/name/setReadAccess:forUser:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getReadAccessForUser:</TokenIdentifier>
			<Abstract type="html">Gets whether the given user is explicitly allowed to read this object.
Even if this returns NO, the user may still be able to access it if getPublicReadAccess returns YES
or if the user belongs to a role that has access.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getReadAccessForUser:(PFUser *)user</Declaration>
			
			
			<Anchor>//api/name/getReadAccessForUser:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setWriteAccess:forUser:</TokenIdentifier>
			<Abstract type="html">Set whether the given user is allowed to write this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setWriteAccess:(BOOL)allowed forUser:(PFUser *)user</Declaration>
			
			
			<Anchor>//api/name/setWriteAccess:forUser:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getWriteAccessForUser:</TokenIdentifier>
			<Abstract type="html">Gets whether the given user is explicitly allowed to write this object.
Even if this returns NO, the user may still be able to write it if getPublicWriteAccess returns YES
or if the user belongs to a role that has access.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getWriteAccessForUser:(PFUser *)user</Declaration>
			
			
			<Anchor>//api/name/getWriteAccessForUser:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getReadAccessForRoleWithName:</TokenIdentifier>
			<Abstract type="html">Get whether users belonging to the role with the given name are allowed
to read this object. Even if this returns false, the role may still
be able to read it if a parent role has read access.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getReadAccessForRoleWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the role.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the role has read access. NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/getReadAccessForRoleWithName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setReadAccess:forRoleWithName:</TokenIdentifier>
			<Abstract type="html">Set whether users belonging to the role with the given name are allowed
to read this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setReadAccess:(BOOL)allowed forRoleWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>allowed</Name>
					<Abstract type="html">Whether the given role can read this object.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the role.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setReadAccess:forRoleWithName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getWriteAccessForRoleWithName:</TokenIdentifier>
			<Abstract type="html">Get whether users belonging to the role with the given name are allowed
to write this object. Even if this returns false, the role may still
be able to write it if a parent role has write access.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getWriteAccessForRoleWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the role.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the role has read access. NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/getWriteAccessForRoleWithName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setWriteAccess:forRoleWithName:</TokenIdentifier>
			<Abstract type="html">Set whether users belonging to the role with the given name are allowed
to write this object.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setWriteAccess:(BOOL)allowed forRoleWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>allowed</Name>
					<Abstract type="html">Whether the given role can write this object.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the role.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setWriteAccess:forRoleWithName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getReadAccessForRole:</TokenIdentifier>
			<Abstract type="html">Get whether users belonging to the given role are allowed to read this
object. Even if this returns NO, the role may still be able to
read it if a parent role has read access. The role must already be saved on
the server and its data must have been fetched in order to use this method.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getReadAccessForRole:(PFRole *)role</Declaration>
			<Parameters>
				<Parameter>
					<Name>role</Name>
					<Abstract type="html">The name of the role.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the role has read access. NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/getReadAccessForRole:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setReadAccess:forRole:</TokenIdentifier>
			<Abstract type="html">Set whether users belonging to the given role are allowed to read this
object. The role must already be saved on the server and its data must have
been fetched in order to use this method.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setReadAccess:(BOOL)allowed forRole:(PFRole *)role</Declaration>
			<Parameters>
				<Parameter>
					<Name>allowed</Name>
					<Abstract type="html">Whether the given role can read this object.</Abstract>
				</Parameter><Parameter>
					<Name>role</Name>
					<Abstract type="html">The role to assign access.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setReadAccess:forRole:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/getWriteAccessForRole:</TokenIdentifier>
			<Abstract type="html">Get whether users belonging to the given role are allowed to write this
object. Even if this returns NO, the role may still be able to
write it if a parent role has write access. The role must already be saved on
the server and its data must have been fetched in order to use this method.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (BOOL)getWriteAccessForRole:(PFRole *)role</Declaration>
			<Parameters>
				<Parameter>
					<Name>role</Name>
					<Abstract type="html">The name of the role.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the role has write access. NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/getWriteAccessForRole:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PFACL/setWriteAccess:forRole:</TokenIdentifier>
			<Abstract type="html">Set whether users belonging to the given role are allowed to write this
object. The role must already be saved on the server and its data must have
been fetched in order to use this method.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>- (void)setWriteAccess:(BOOL)allowed forRole:(PFRole *)role</Declaration>
			<Parameters>
				<Parameter>
					<Name>allowed</Name>
					<Abstract type="html">Whether the given role can write this object.</Abstract>
				</Parameter><Parameter>
					<Name>role</Name>
					<Abstract type="html">The role to assign access.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setWriteAccess:forRole:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PFACL/setDefaultACL:withAccessForCurrentUser:</TokenIdentifier>
			<Abstract type="html">Sets a default ACL that will be applied to all PFObjects when they are created.</Abstract>
			<DeclaredIn>PFACL.h</DeclaredIn>			
			
			<Declaration>+ (void)setDefaultACL:(PFACL *)acl withAccessForCurrentUser:(BOOL)currentUserAccess</Declaration>
			<Parameters>
				<Parameter>
					<Name>acl</Name>
					<Abstract type="html">The ACL to use as a template for all PFObjects created after setDefaultACL has been called.
This value will be copied and used as a template for the creation of new ACLs, so changes to the
instance after setDefaultACL has been called will not be reflected in new PFObjects.</Abstract>
				</Parameter><Parameter>
					<Name>currentUserAccess</Name>
					<Abstract type="html">If true, the PFACL that is applied to newly-created PFObjects will
provide read and write access to the currentUser at the time of creation. If false,
the provided ACL will be used without modification. If acl is nil, this value is ignored.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultACL:withAccessForCurrentUser:</Anchor>
		</Token>
		
	</File>
</Tokens>