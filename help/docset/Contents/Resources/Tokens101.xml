<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/FBTask.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/FBTask</TokenIdentifier>
			<Abstract type="html">The consumer view of a Task. A FBTask has methods to
inspect the state of the task, and to add continuations to
be run once the task is complete.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>
			
			<NodeRef refid="101"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBTask/taskWithResult:</TokenIdentifier>
			<Abstract type="html">Creates a task that is already completed with the given result.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>+ (FBTask *)taskWithResult:(id)result</Declaration>
			
			
			<Anchor>//api/name/taskWithResult:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBTask/taskWithError:</TokenIdentifier>
			<Abstract type="html">Creates a task that is already completed with the given error.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>+ (FBTask *)taskWithError:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/taskWithError:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBTask/taskWithException:</TokenIdentifier>
			<Abstract type="html">Creates a task that is already completed with the given exception.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>+ (FBTask *)taskWithException:(NSException *)exception</Declaration>
			
			
			<Anchor>//api/name/taskWithException:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBTask/cancelledTask</TokenIdentifier>
			<Abstract type="html">Creates a task that is already cancelled.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>+ (FBTask *)cancelledTask</Declaration>
			
			
			<Anchor>//api/name/cancelledTask</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBTask/taskDependentOnTasks:</TokenIdentifier>
			<Abstract type="html">Returns a task that will be completed (with result == nil) once
all of the input tasks have completed.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>+ (FBTask *)taskDependentOnTasks:(NSArray *)tasks</Declaration>
			
			
			<Anchor>//api/name/taskDependentOnTasks:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FBTask/taskWithDelay:</TokenIdentifier>
			<Abstract type="html">Returns a task that will be completed a certain amount of time in the future.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>+ (FBTask *)taskWithDelay:(dispatch_time_t)delay</Declaration>
			<Parameters>
				<Parameter>
					<Name>delay</Name>
					<Abstract type="html">The amount of time to wait before the
task will be finished (with result == nil).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/taskWithDelay:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/result</TokenIdentifier>
			<Abstract type="html">The result of a successful task.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (id)result</Declaration>
			
			
			<Anchor>//api/name/result</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/error</TokenIdentifier>
			<Abstract type="html">The error of a failed task.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (NSError *)error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/exception</TokenIdentifier>
			<Abstract type="html">The exception of a failed task.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (NSException *)exception</Declaration>
			
			
			<Anchor>//api/name/exception</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/isCancelled</TokenIdentifier>
			<Abstract type="html">Whether this task has been cancelled.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isCancelled</Declaration>
			
			
			<Anchor>//api/name/isCancelled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/isCompleted</TokenIdentifier>
			<Abstract type="html">Whether this task has completed.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isCompleted</Declaration>
			
			
			<Anchor>//api/name/isCompleted</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/dependentTaskWithBlock:</TokenIdentifier>
			<Abstract type="html">Enqueues the given block to be run once this task is complete.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (FBTask *)dependentTaskWithBlock:(id ( ^ ) ( FBTask *task ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be run once this task is complete.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A task that will be completed after block has run.
If block returns a FBTask, then the task returned from
this method will not be completed until that task is completed.</Abstract></ReturnValue>
			<Anchor>//api/name/dependentTaskWithBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/dependentTaskWithBlock:queue:</TokenIdentifier>
			<Abstract type="html">Identical to dependentTaskWithBlock:, except the block
is dispatched to the specified queue.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (FBTask *)dependentTaskWithBlock:(id ( ^ ) ( FBTask *task ))block queue:(dispatch_queue_t)queue</Declaration>
			
			
			<Anchor>//api/name/dependentTaskWithBlock:queue:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/completionTaskWithBlock:</TokenIdentifier>
			<Abstract type="html">Identical to dependentTaskWithBlock:, except that the block is only run
if this task did not produce a cancellation, error, or exception.
If it did, then the failure will be propagated to the returned
task.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (FBTask *)completionTaskWithBlock:(id ( ^ ) ( FBTask *task ))block</Declaration>
			
			
			<Anchor>//api/name/completionTaskWithBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/completionTaskWithQueue:block:</TokenIdentifier>
			<Abstract type="html">Identical to completionTaskWithBlock:, except the block
is dispatched to the specified queue.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (FBTask *)completionTaskWithQueue:(dispatch_queue_t)queue block:(id ( ^ ) ( FBTask *task ))block</Declaration>
			
			
			<Anchor>//api/name/completionTaskWithQueue:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/waitUntilFinished</TokenIdentifier>
			<Abstract type="html">Waits until this operation is completed.
This method is inefficient and consumes a thread resource while
it&apos;s running. It should be avoided. This method logs a warning
message if it is used on the main thread.</Abstract>
			<DeclaredIn>FBTask.h</DeclaredIn>			
			
			<Declaration>- (void)waitUntilFinished</Declaration>
			
			
			<Anchor>//api/name/waitUntilFinished</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FBTask/waitForResult:</TokenIdentifier>
			<Abstract type="html">Waits until this operation is completed, then returns its value.
This method is inefficient and consumes a thread resource while
its running. It should be avoided. This method logs an warning
message if it is used on the main thread. If this task is cancelled,
nil is returned.</Abstract>
			<DeclaredIn>FBTask+Private.h</DeclaredIn>			
			
			<Declaration>- (id)waitForResult:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/waitForResult:</Anchor>
		</Token>
		
	</File>
</Tokens>