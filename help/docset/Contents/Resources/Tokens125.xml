<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/JSONKeyMapper.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/JSONKeyMapper</TokenIdentifier>
			<Abstract type="html">You won&apos;t need to create or store instances of this class yourself. If you want your model
to have different property names than the JSON feed keys, look below on how to
make your model use a key mapper.</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>
			
			<NodeRef refid="125"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSONKeyMapper/setJSONToModelKeyBlock:</TokenIdentifier>
			<Abstract type="html">Block, which takes in a JSON key and converts it to the corresponding property name</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) JSONModelKeyMapBlock JSONToModelKeyBlock</Declaration>
			
			
			<Anchor>//api/name/JSONToModelKeyBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSONKeyMapper/JSONToModelKeyBlock</TokenIdentifier>
			<Abstract type="html">Block, which takes in a JSON key and converts it to the corresponding property name</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) JSONModelKeyMapBlock JSONToModelKeyBlock</Declaration>
			
			
			<Anchor>//api/name/JSONToModelKeyBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSONKeyMapper/setModelToJSONKeyBlock:</TokenIdentifier>
			<Abstract type="html">Block, which takes in a property name and converts it to the corresponding JSON key name</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) JSONModelKeyMapBlock modelToJSONKeyBlock</Declaration>
			
			
			<Anchor>//api/name/modelToJSONKeyBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSONKeyMapper/modelToJSONKeyBlock</TokenIdentifier>
			<Abstract type="html">Block, which takes in a property name and converts it to the corresponding JSON key name</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) JSONModelKeyMapBlock modelToJSONKeyBlock</Declaration>
			
			
			<Anchor>//api/name/modelToJSONKeyBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSONKeyMapper/initWithJSONToModelBlock:modelToJSONBlock:</TokenIdentifier>
			<Abstract type="html">Creates a JSONKeyMapper instance, based on the two blocks you provide this initializer.
The two parameters take in a JSONModelKeyMapBlock block:
&lt;pre&gt;NSString (^JSONModelKeyMapBlock)(NSString keyName)&lt;/pre&gt;
The block takes in a string and returns the transformed (if at all) string.</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>			
			
			<Declaration>- (instancetype)initWithJSONToModelBlock:(JSONModelKeyMapBlock)toModel modelToJSONBlock:(JSONModelKeyMapBlock)toJSON</Declaration>
			<Parameters>
				<Parameter>
					<Name>toModel</Name>
					<Abstract type="html">transforms JSON key name to your model property name</Abstract>
				</Parameter><Parameter>
					<Name>toJSON</Name>
					<Abstract type="html">transforms your model property name to a JSON key</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithJSONToModelBlock:modelToJSONBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSONKeyMapper/initWithDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a JSONKeyMapper instance, based on the mapping you provide
in the map parameter. Use the JSON key names as keys, your JSONModel
property names as values.</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>			
			
			<Declaration>- (instancetype)initWithDictionary:(NSDictionary *)map</Declaration>
			<Parameters>
				<Parameter>
					<Name>map</Name>
					<Abstract type="html">map dictionary, in the format: &lt;pre&gt;@{@&quot;crazyJSONname&quot;:@&quot;myCamelCaseName&quot;}&lt;/pre&gt;</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">JSONKeyMapper instance</Abstract></ReturnValue>
			<Anchor>//api/name/initWithDictionary:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/JSONKeyMapper/mapperFromUnderscoreCaseToCamelCase</TokenIdentifier>
			<Abstract type="html">Creates a JSONKeyMapper, which converts underscore_case to camelCase and vice versa.</Abstract>
			<DeclaredIn>JSONKeyMapper.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)mapperFromUnderscoreCaseToCamelCase</Declaration>
			
			
			<Anchor>//api/name/mapperFromUnderscoreCaseToCamelCase</Anchor>
		</Token>
		
	</File>
</Tokens>